// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/base64.proto

package base64grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Base64Client is the client API for Base64 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Base64Client interface {
	// Encode the string
	EncodeString(ctx context.Context, in *EncodingRequest, opts ...grpc.CallOption) (*EncodingResponse, error)
	// Decode the string
	DecodeString(ctx context.Context, in *DecodingRequest, opts ...grpc.CallOption) (*DecodingResponse, error)
}

type base64Client struct {
	cc grpc.ClientConnInterface
}

func NewBase64Client(cc grpc.ClientConnInterface) Base64Client {
	return &base64Client{cc}
}

func (c *base64Client) EncodeString(ctx context.Context, in *EncodingRequest, opts ...grpc.CallOption) (*EncodingResponse, error) {
	out := new(EncodingResponse)
	err := c.cc.Invoke(ctx, "/base64.Base64/EncodeString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *base64Client) DecodeString(ctx context.Context, in *DecodingRequest, opts ...grpc.CallOption) (*DecodingResponse, error) {
	out := new(DecodingResponse)
	err := c.cc.Invoke(ctx, "/base64.Base64/DecodeString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Base64Server is the server API for Base64 service.
// All implementations must embed UnimplementedBase64Server
// for forward compatibility
type Base64Server interface {
	// Encode the string
	EncodeString(context.Context, *EncodingRequest) (*EncodingResponse, error)
	// Decode the string
	DecodeString(context.Context, *DecodingRequest) (*DecodingResponse, error)
	mustEmbedUnimplementedBase64Server()
}

// UnimplementedBase64Server must be embedded to have forward compatible implementations.
type UnimplementedBase64Server struct {
}

func (UnimplementedBase64Server) EncodeString(context.Context, *EncodingRequest) (*EncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeString not implemented")
}
func (UnimplementedBase64Server) DecodeString(context.Context, *DecodingRequest) (*DecodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeString not implemented")
}
func (UnimplementedBase64Server) mustEmbedUnimplementedBase64Server() {}

// UnsafeBase64Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Base64Server will
// result in compilation errors.
type UnsafeBase64Server interface {
	mustEmbedUnimplementedBase64Server()
}

func RegisterBase64Server(s grpc.ServiceRegistrar, srv Base64Server) {
	s.RegisterService(&Base64_ServiceDesc, srv)
}

func _Base64_EncodeString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Base64Server).EncodeString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base64.Base64/EncodeString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Base64Server).EncodeString(ctx, req.(*EncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base64_DecodeString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Base64Server).DecodeString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base64.Base64/DecodeString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Base64Server).DecodeString(ctx, req.(*DecodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Base64_ServiceDesc is the grpc.ServiceDesc for Base64 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Base64_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base64.Base64",
	HandlerType: (*Base64Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncodeString",
			Handler:    _Base64_EncodeString_Handler,
		},
		{
			MethodName: "DecodeString",
			Handler:    _Base64_DecodeString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/base64.proto",
}
